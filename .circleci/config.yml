_defaults:
  docker_image_browser: &docker_image_browser
    docker:
    - image: circleci/node:8.9.4-browsers
      environment:
        DATABASE_URL: "postgres://ubuntu@localhost/circle_test"
        VCAP_APPLICATION: '{"uris":["http://localhost:8080/"]}'
        PLATFORM: local
    - image: postgres:9.6.3
      environment:
          POSTGRES_USER: "ubuntu"
          POSTGRES_DB: "circle_test"

_run:
  populate_server: &populate_server
    name: populate db for server
    command: |
      cd server
      npm run migrate
      npm run seed

  install_dependencies: &install_dependencies
    name: Install frontend and server dependencies
    command: |
      cd frontend
      yarn install
      cd ../server
      yarn install

  install_cf: &install_cf
    name: Install cf cli
    command: |
      curl -L "https://cli.run.pivotal.io/stable?release=linux64-binary&source=github" | tar -zx
      sudo mv cf /usr/local/bin

version: 2
jobs:
  run-all-other-tests:
    <<: *docker_image_browser
    steps:
      - checkout
      - restore_cache:
          keys:
          - fs-epermit-deps-{{ checksum "frontend/package.json" }}-{{ checksum "server/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - fs-epermit-deps-
      - run: *install_dependencies
      - run:
          name: Frontend - lint
          command: |
            cd frontend
            yarn run lint
      - run:
          name: Frontend - snyk dependency scan
          command: |
            mkdir -p a=rw snyk
            sudo npm install -g snyk
            export DATE_STRING=`date +"%m-%d-%Y-%H"`
            export SNYK_REPORT=snyk-${CIRCLE_PR_REPONAME}-frontend-${DATE_STRING}.csv
            cd frontend
            yarn run snyk-test # For Human
      - run:
          name: Install sequelize
          command: yarn global add sequelize-cli

      - save_cache:
          paths:
            - ./frontend/node_modules
            - ./server/node_modules
          key: fs-epermit-deps-{{ checksum "server/package.json" }}-{{ checksum "frontend/package.json" }}
      - run:
          name: Server - lint
          command: |
            cd server
            yarn run lint
      - run:
          name: Server - snyk dependency scan
          command: |
            export DATE_STRING=`date +"%m-%d-%Y-%H"`
            export SNYK_REPORT=snyk-${CIRCLE_PR_REPONAME}-server-${DATE_STRING}.csv
            cd server
            yarn run snyk-protect
            yarn run snyk-test
      - run:
          name: Copy shared assets from frontend into serverr
          command: cd server; ./copy-frontend-assets.sh
      - run:
          name: Frontend - unit tests
          command: |
            cd frontend
            yarn run test:ci
      - run: *populate_server
      - run:
          name: Server - unit tests
          command: |
            cd server
            yarn coverage
      - store_artifacts:
          path: frontend/coverage
          prefix: frontend-coverage
      - store_artifacts:
          path: server/coverage
          prefix: server-coverage

  build-e2e:
    <<: *docker_image_browser
    steps:
      - checkout
      - restore_cache:
          keys:
          - fs-epermit-deps-{{ checksum "frontend/package.json" }}-{{ checksum "server/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - fs-epermit-deps-
      - run: *install_dependencies
      - run:
          name: Install latest chrome
          command: |
            sudo apt-get update
            sudo apt-get install lsb-release libappindicator3-1
            curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome.deb
            sudo sed -i 's|HERE/chrome"|HERE/chrome" --no-sandbox|g' /opt/google/chrome/google-chrome
            rm google-chrome.deb
            google-chrome --version
      - save_cache:
          paths:
            - ./frontend/node_modules
            - ./server/node_modules
          key: fs-epermit-deps-{{ checksum "server/package.json" }}-{{ checksum "frontend/package.json" }}
      - run:
          name: Copy shared assets from frontend into server
          command: cd server; ./copy-frontend-assets.sh
      - persist_to_workspace:
          root: .
          paths: 
            - .
  run-auth-e2e:
    <<: *docker_image_browser
    parallelism: 4
    steps:
      - attach_workspace:
          at: .
      - run: *populate_server
      - run:
          name: Run authenicated e2e tests
          command: |
            export TESTFILES=$(cd frontend;circleci tests glob "./e2e/authenticated/**/*.e2e-spec.ts" | circleci tests split)
            echo 'This container is running the following tests:'
            echo ${TESTFILES}
            .circleci/run-e2e.sh -a ${TESTFILES}
      - run:
          name: Install dependencies and clean s3 bucket
          command: ./.circleci/clean-s3-bucket.sh
      - store_artifacts:
          path: frontend/e2e-test-results
          prefix: e2e-results
  run-unauth-e2e:
    <<: *docker_image_browser
    steps:
      - attach_workspace:
          at: project
      - run: *populate_server
      - run:
          name: Run unauthenticated e2e tests
          command: |
            .circleci/run-e2e.sh -u
      - store_artifacts:
          path: frontend/e2e-test-results
          prefix: e2e-results

  run-pa11y:
    machine: true
    steps:
      - checkout
      - run:
          name: Install node@8.9.4
          command: |
            set +e
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v8.9.4
            nvm alias default v8.9.4

            # Each step uses the same `$BASH_ENV`, so need to modify it
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo "[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"" >> $BASH_ENV
      - restore_cache:
          keys:
          - fs-epermit-pa11y-deps-{{ checksum "frontend/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - fs-epermit-pa11y-deps-
      - run:
          name: install pa11y
          command:  |
            cd frontend
            npm i -g pa11y-ci
            npm i
      - save_cache:
          paths:
            - ./frontend/node_modules
            - ./opt/circleci/.nvm/versions/node/v8.9.4/bin/
          key: fs-epermit-pa11y-deps-{{ checksum "frontend/package.json" }}
      - run:
          name: pa11y test
          command: |
            cd docker
            ../.circleci/pa11y.sh

  build-docker:
    machine: true
    steps:
      - checkout
      - run:
          name: Copy shared assets from frontend into server
          command: cd server; ./copy-frontend-assets.sh
      - run:
          name: build docker compose images
          command: cd docker; ../.circleci/build-docker-images.sh
      - run:
          name: install dependencies
          command: |
            cd docker
            ../.circleci/install-dependencies-docker.sh
      - run:
          name: docker e2e smoke screen test
          command: |
            cd docker
            docker-compose run fs-intake-frontend sudo yarn e2e:cidkr
            e2ereturncode=$?
            if [[ $e2ereturncode = 0 ]]
              then echo 'SUCCESS'
            else echo 'FAIL'
            fi
            exit $e2ereturncode

  staging-deploy:
    docker:
      - image: circleci/node:8.9.4
    steps:
      - checkout
      - restore_cache:
          keys:
          - fs-epermit-deps-{{ checksum "frontend/package.json" }}-{{ checksum "server/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - fs-epermit-deps-
      - run:
          name: remove yarn dependencies
          command: rm -rf ~/.yarn
      - run:
          name: Install yarn
          command: sudo npm i -g yarn
      - run:
          name: install dependencies
          command: .circleci/install-deployment-dependencies.sh
      - save_cache:
          paths:
            - ./frontend/node_modules
            - ./server/node_modules
          key: fs-epermit-deps-{{ checksum "server/package.json" }}-{{ checksum "frontend/package.json" }}
      - run:
          name: Run update-version to set frontend builddate and version in environment.ts for footer
          command: |
            cd frontend
            yarn run update-version;
      - run:
          name: generate typedocs
          command: |
            cd frontend
            yarn run docs
      - run:
          name: server snyk protect
          command: |
            cd server
            yarn run snyk-protect
      - run:
          name: Create frontend compiled distribution
          command: |
            cd frontend
            yarn dist-trees
      - run:
          name: Generate basic auth
          command: echo "${BASIC_AUTH_USER}:${BASIC_AUTH_PASS}" > frontend/dist/Staticfile.auth
      - run:
          name: copy frontend assets into server
          command: |
            cd server
            ./copy-frontend-assets.sh
      - run:
          name: generate jsdocs
          command: |
            cd server
            yarn run docs
      - run: *install_cf
      - run:
          name: deploy
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "18F" ];
              then ./.cg-deploy/deploy.sh public-trees-staging;
            fi

  prod-deploy:
    docker:
      - image: circleci/node:8.9.4
    steps:
      - checkout
      - restore_cache:
          keys:
          - fs-epermit-deps-{{ checksum "frontend/package.json" }}-{{ checksum "server/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - fs-epermit-deps-
      - run:
          name: remove yarn dependencies
          command: rm -rf ~/.yarn
      - run:
          name: Install yarn
          command: sudo npm i -g yarn
      - run:
          name: install dependencies
          command: .circleci/install-deployment-dependencies.sh
      - save_cache:
          paths:
            - ./frontend/node_modules
            - ./server/node_modules
          key: fs-epermit-deps-{{ checksum "server/package.json" }}-{{ checksum "frontend/package.json" }}
      - run:
          name: Run update-version to set frontend builddate and version in environment.ts for footer
          command: |
            cd frontend
            yarn run update-version
      - run:
          name: generate typedocs
          command: |
            cd frontend
            yarn run docs
      - run:
          name: Create frontend compiled distribution
          command: |
            cd frontend
            yarn dist-prod
      - run:
          name: Generate basic auth - will remove as final launch task
          command: echo "${BASIC_AUTH_USER}:${BASIC_AUTH_PASS}" > frontend/dist/Staticfile.auth
      - run:
          name: copy frontend assets into server
          command: |
            cd server
            ./copy-frontend-assets.sh
      - run:
          name: generate jsdocs
          command: |
            cd server
            yarn run docs
      - run: *install_cf
      - run:
          name: deploy
          command: |
            if [ "${CIRCLE_PROJECT_USERNAME}" == "18F" ];
              then ./.cg-deploy/deploy.sh public-production;
            fi

  nightly-snyk:
    docker:
      - image: circleci/node:8.9.4
    steps:
      - checkout
      - restore_cache:
          keys:
          - fs-epermit-deps-{{ checksum "frontend/package.json" }}-{{ checksum "server/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - fs-epermit-deps-
      - run: *install_dependencies
      - run:
          name: Snyk and upload
          command: |
            ./.circleci/store-snyk.sh

  recycle-production:
    docker:
      - image: circleci/node:8.9.4
    steps:
      - run: *install_cf
      - run:
          name: Install cf-recycle-plugin 1.0.0 release
          command: |
            curl -L -o cf-recycle-plugin https://github.com/rogeruiz/cf-recycle-plugin/releases/download/v1.0.0/cf-recycle-plugin.linux64
            chmod +x cf-recycle-plugin
            cf install-plugin cf-recycle-plugin -f
      - run:
          name: Login to cloud.gov Production
          command: |
            CF_API="https://api.fr.cloud.gov"
            cf login -a ${CF_API} -u ${CF_USERNAME_PROD} -p ${CF_PASSWORD_PROD}
      - run:
          name: Recycle Production instances
          command: |
            cf t -o usda-forest-service -s public-production
            cf recycle forest-service-epermit
            cf recycle fs-intake-api

workflows:
  version: 2
  build-deploy:
    jobs:
      - run-all-other-tests
      - build-e2e
      - run-unauth-e2e:
          requires:
            - build-e2e
      - run-auth-e2e:
          requires:
            - build-e2e
      - build-docker:
          filters:
            branches:
              only: dev
      - run-pa11y:
          filters:
            branches:
              only: dev
      - staging-deploy:
          requires:
            - run-all-other-tests
            - run-auth-e2e
            - run-unauth-e2e
            - run-pa11y
            - build-docker
          filters:
            branches:
              only: dev
      - prod-deploy:
          requires:
            - run-all-other-tests
            - run-auth-e2e
            - run-unauth-e2e
            - run-pa11y
          filters:
            branches:
              only: master
  nightly:
    jobs:
      - nightly-snyk
      - recycle-production
    triggers:
      - schedule:
          # every night at 2:11 AM UTC (10:11 PM ET)
          cron: "11 02 * * *"
          filters:
            branches:
              only:
                - master
